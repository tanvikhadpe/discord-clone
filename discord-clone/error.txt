Im developing this app with next js, prisma and mysql and using [Filess.io](https://filess.io/) for hosting database. Im getting this error whenever I query the database. Ive tried recreating the db from scratch, reseting with 'prisma db reset' command and so far nothing has worked. how to I solve this error?

Following is the error:

```
 тип PrismaClientUnknownRequestError:
Invalid `prisma.profile.findUnique()` invocation:


Error in connector: Error querying the database: Server error: `ERROR 42000 (1226): User 'discordClone_ownadvice' has exceeded the 'max_user_connections' resource (current value: 3)'
    at async currentProfile (./lib/current-profile.ts:14:21)
    at async NavigationSidebar (./components/navigation/navigation-sidebar.tsx:28:21)
 тип PrismaClientUnknownRequestError:
Invalid `prisma.profile.findUnique()` invocation:


Error in connector: Error querying the database: Server error: `ERROR 42000 (1226): User 'discordClone_ownadvice' has exceeded the 'max_user_connections' resource (current value: 3)'
    at async currentProfile (./lib/current-profile.ts:14:21)
    at async NavigationSidebar (./components/navigation/navigation-sidebar.tsx:28:21)
digest: "2909920952"

```

Here's the currentProfile.ts file:


```
import { auth } from "@clerk/nextjs";
import { db } from "@/lib/db";

export const currentProfile = async () => {

    const { userId } = auth();
    
    if(!userId){
        return null;
    }

    const profile = await db.profile.findUnique({
        where:{
            userId
        }
    });

    return profile;
}
```

and here is ServerIdLayout.tsx file

```
import { ServerSidebar } from "@/components/server/server-sidebar";
import { currentProfile } from "@/lib/current-profile";
import { db } from "@/lib/db";
import { redirectToSignIn } from "@clerk/nextjs";
import { redirect } from "next/navigation";

const ServerIdLayout = async ({
    children,
    params,
}: {
    children: React.ReactNode;
    params: {serverId: string}
}) => {

    const profile  = await currentProfile();
    if (!profile) {
        return redirectToSignIn()
    }

    const server = await db.server.findUnique({
        where: {
            id: params.serverId,
            members: {
                some: {
                    profileId: profile.id
                }
            }
        }
    });

    if (!server){
        return redirect("/");
    }
    return (
        <div className="h-full">
            <div className="hidden md:flex h-full w-60 z-20 flex-col fixed inset-y-0">
                <ServerSidebar serverId={params.serverId} />
            </div>
                <main className="h-full md:pl-60">
                    {children}
                </main>
            
        </div>
    );
}

export default ServerIdLayout
```

schema.prisma file:

```
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile{
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  servers Server[]
  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map ("Profile")
}

model Server{
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@map ("Server")
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member{
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields:[serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId]) 
  @@map ("Member")
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server Server @relation(fields:[serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId]) 
  @@map ("Channel")
}
```



 
